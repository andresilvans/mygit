String.h

#include <iostream>#include <assert.h>using namespace std;

class String
{
public:
//构造函数
String(const char* str = "")
{
if(NULL == str)
{
char* temp =new char[1+3];
_pStr = temp + 4;
_GetRefer() = 1;
*_pStr = '\0';
}
else
{
char* temp = new char[strlen(str)+1+3];
_pStr = temp + 3;
strcpy(_pStr, str);
_GetRefer() = 1;
}
}

//拷贝构造函数
String(const String& s)
:_pStr(s._pStr)
{
_GetRefer()++;
}

//析构函数
~String()
{
Release();
}

String& operator=(const String& s);
char& operator[](size_t index);
const char& operator[](size_t index)const;
int& String::_GetRefer();
void Release();
friend ostream& operator<<(ostream& _cout, const String& s);

private:
char *_str;
}

String.cpp

//运算符重载
String& String:: operator = (const String &s)
{
if(_pStr != s._pStr)
{
if(--_GetRefer() == 0)
{
Release();
_pStr = s._pStr;
_GetRefer()++;
}
else
{
_pStr = s._pStr;
_GetRefer()++;
}
}
return *this;
}


//获取引用计数int& String ::_GetRefer()
{
return *((int*)_pStr-1);
}

//释放空间void String ::Release()
{
if(--_GetRefer() == 0)
{
_pStr -= 3;
delete[] _pStr;
_pStr == NULL;
}
}


//成对出现char* String ::operator [](size_t index)
{
if(_GetRefer() > 1)
{
_GetRefer()--;
char* temp = new char[strlen(_pStr)+1+3];
temp += 3;
strcpy(temp, _pStr);
-pStr = temp;
_GetRefer() = 1; //(新开的空间)
}
return _pStr[index];
}

const char* String ::operator [](size_t index)const
{
return _pStr[index];
}

void Test1()
{
const String s1("hello");
String s2(s1);
//String s3;
//s3 = s2;
cout << s1[4] << endl;
}

int main()
{
Test1();
return 0;
}
